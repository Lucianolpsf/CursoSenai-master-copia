PYTHON

Pandas

    https://pandas.pydata.org/docs/ > Pandas Documentation

    Não devem ser deixados valores vazios, eles devem ser tratados. Valores Nan indicam que o campo está vazio
    Corrija os tipos de dados antes das análises
    Verifique as primeiras e últimas linhas
    Verifique se os títulos das colunas estão corretos

    Para Numpy e Pandas a notação correta do operador 'e' é & e não and, 'ou' é | e não or

    Para o Pandas reconhecer o Excel
    >>> pip install openpyxl


Series

    O Pandas é fundamentado em series. As series são visualizadas em forma de colunas.
    Os arrays possuem índices numéricos, as series podem ter os índices alterados.
    Os dataframes são tabelas e as series as colunas
    As series podem ter valores de diversos tipos

    Para inserir um valor nulo na serie coloque np.nan
    >>> serie1 = pd.Series([1, 'ola', np.nan, 9])

    Criação de serie a partir de uma lista
    Os índices serão de 0 a n
    >>> lista1 = [2, 4, 5, 8, 9]
    >>> pd.Series(lista1)

    Criação de serie a partir de um dicionário
    Os índices serão as chaves. Um valor poderá ser chamado pelo índice ou pelo nome
    >>> dicionario1 = {'nome': 'joao', 'telefone': '8888-8888'}
    >>> dicionario1[1] ou dicionario1['telefone']

    Criar serie a partir de um array
    >>> arr1 = np.array([12, 4, 7, 19])
    >>> serie1 = pd.Series(arr1)

    Criando serie já com índices categóricos pré-definidos
    >>> arr2 = np.array([9,32,4], index=['Brasil', 'USA', 'China'])

    As operações entre series são baseadas nos índices
    >>> serie3 = pd.Series([9,4,3], index=['Brasil','China', 'USA'])
    >>> serie4 = pd.Series([0,2], index=['Uruguai', 'Brasil']
    >>> serie5 = serie3 + serie4  >  o retorno somará os índices do Brasil e colocando o Uruguai a mais em relação à serie3

    Valores específicos de uma serie podem ser acessados da seguinte maneira
    >>> serie1[1][3]
    >>> cliente_df['telefone'][2]


DataFrames

    >>> pd.set_option('display.maxcolumns', None)
    Mostra uma quantidade limite de colunas. Caso se coloque None, não tem limite

    Criação de um dataframe
    >>> df1 = pd.DataFrame(data=arr1)

    Definindo índices e nome de colunas
    >>> df1 = pd.DataFrames(data=arr1, index=['Aula1', 'Aula2'], columns= ['Professor', 'Materia'])

    Criando um dataframe a partir de um dicionário
    >>> dicionario2 = {'Produtos':['TV', 'Notebook', 'Console'], 'preco': [1000, 3000, 500]}
    >>> df3 = pd.DataFrame(data= dicionario2)

    >>> nome_df = pd.read_csv(vendas1, decimal=',')
    Declara que a ',' é o separador de decimal e não o '.'

    >>> nome_df = pd.read_csv('vendas1.xlsx, sep=';')
    Um arquivo csv normalmente vem separado por ',', caso venha por ';' é preciso informar isso para o Pandas

    >>> nome_df = pd.read_csv('vendas1.xlsx, sep=';', encoding='utf-8')
    >>> nome_df = pd.read_csv('vendas1.xlsx, sep=';', encoding='cp1252')
    >>> nome_df = pd.read_csv('vendas1.xlsx, sep=';', encoding='latin1')
    Caso a codificação do arquivo não seja reconhecida pelo Pandas, pode ser preciso informar

    Carregar apenas algumas colunas
    >>> nome_df = pd.read_csv('vendas1.xlsx, sep=';', encoding='utf-8', usecols = [2,5,24])

    Desconsidera linhas na importação
    >>> pd.read_excel(vendas1, skiprows=2) > desconsidera as 2 primeiras linhas
    >>> pd.read_excel(vendas1, skifooter=2) > desconsidera as 2 últimas linhas

    .iloc[linha, coluna]
    .loc[linha, nome da coluna]

    >>> df[coluna]
    >>> df[[coluna1, coluna2]]
    >>> df[coluna][linha]
    >>> df[linha1:linha4] > Para esta notação o Python considera as linhas
    >>> df.loc[ind1, col3]
    >>> df.loc['Julho', col2]
    >>> df.iloc[ind2, ind_col4]
    >>> df.loc [[ind3, ind4, in6],[col1, col5]]
    >>> df.loc[3:5][2:6]  > retorna as linhas 3 e 4 e as colunas de 2 a 5

    Para o método loc se for passado um índice ele retorna uma linha, se for passado um nome ele retorna uma coluna
    >>> display(nome_df.loc[4]) > exibe a linha 4 do dataframe
    >>> display(nome_df.loc[4:9]) > exibe da linha 4 a 9 do dataframe
    >>> display(nome_df.loc[nome_df['Descrição'] == 'Verde']) > retorna as linhas da tabela que tem Verde na coluna Descrição
    >>> display(nome_df.loc[nome_df['Descrição'] == 'Verde'][['Descrição', 'Vendas']]) > retorna as linhas da tabela que tem Verde na coluna Descrição, mas trazendo somente as colunas Descrição e Vendas
    >>> display(nome_df.loc[1, 'Família'] == 'Modinha') > retorna a célula da linha 1 da coluna Modinha

    Alterar os índices da Data Frame
    >>> df.rename(columns={'Novembro':'Dezembro'})  >  Altera o índice Novembro para Dezembro

    Inplace = True > coloca as alterações realizadas no dataframe sem precisar atribuí-lo para receber as alterações
    >>> df.rename({'Novembro':'Dezembro'}, inplace= True)

    Forçar o Python a sobrescrever o arquivo, apagando o anterior
    >>> nome_df.drop(nome_df.index[0], inplace=True)

    Selecionar valores específicos de um DataFrame preenchendo os nulos com um '-'
    Primeiro são selecionadas as linhas e depois as colunas
    >>> df[df > 1000][:][col1,col2,col3,col4].fillna('-')

    Definindo vários filtros em um data frame
    df[(condicao) & (condicao)]
    >>> df[(df[10] & df[15] > 1500)]   > retorna as linhas para as quais os valores das colunas 10 e 15 foram maiores do que 1500
    >>> df[(df[10] | df[15] > 1500)]   > retorna as linhas para as quais os valores das colunas 10 ou 15 foram maiores do que 1500

    retorna os índices do dataframe
    >>> nome_df.index

    retorna informações do dataframe, como os nomes das colunas, valores vazios, tipos
    >>> nome_df.info()

    retorna as últimas linhas do dataframe
    >>> nome_df.tail(3)

    retorna os tipos do dataframe
    >>> nome_df.dtypes

    mostra as primeiras 6 linhas do dataframe
    >>> nome_df.head(6)

    exibe os totais de linhas e colunas
    >>> nome_df.shape

    análise automática de dados numéricos
    >>> nome_df.describe()

    exibe somente a coluna Vendas do dataframe
    >>> nome_df['Vendas']

    atribui à var1 as colunas especificadas do dataframe
    >>> var1 = nome_df[['Vendas', 'Vendedor']]

    restarta os índices do dataframe
    >>> nome_df.resetindex()

    retorna linhas aleatórias do dataframe
    >>> nome_df.sample()

    conta os valores da coluna Família que contenham a expressão Armar
    >>> nome_df[nome_df['Família'].str.contains('Armar')].count()

    Retorna os 5 maiores da coluna
    >>> nome_df.nlargest(5, 'Vendas')

    Retorna os 5 menores da coluna
    >>> nome_df.nsmallest(5, 'Vendas')

    >>> nome_df['Família'].unique() > retorna valores únicos de uma coluna
    >>> vendas2 = nome_df['Família' != 'CMB'].copy() > faz uma cópia na criação de um novo dataframe, para evitar que o python mantenha o novo df referenciado ao df pai

    Para criar uma coluna nova basta definir um nome de coluna inexistente e atribuir um valor calculado em cima de outra coluna ou um valor fixo
    >>> nome_df['Imposto'] = nome_df['Vendas'] * 0.003
    >>> nome_df.loc[:, 'Imposto'] = 18 > outra forma de criar uma coluna com valor fixo

    Criação de uma nova coluna com o comando Eval. Deve ser passado o nome da coluna a ser criada, seguido pela operação a ser realizada
    >>> df.eval('razao' = 'construcao' / 'terreno')

    Exclusão de linhas. O eixo 0 se refere a linha e o 1 a coluna
    >>> nome_df = nome_df.drop(0, axis=0)
    >>> nome_df = nome_df.drop('Alíquota', axis=1)

    Exclusão de linhas que tiverem pelo menos um valor vazio
    >>> nome_df = nome_df.dropna() ou
    >>> nome_df = nome_df.dropna(how='any')

    Exclui as colunas que tiverem todos os valores vazios
    >>> nome_df.dropna(how= 'all', axis=1)

    Exclui as colunas que tiverem algum valor vazio
    >>> nome_df.dropna(axis=1)

    Preencher valores vazios com 2.5
    >>> nome_df['Alíquota'] = nome_df['Alíquota'].fillna(2.5)

    Preencher valores vazios com a média
    >>> nome_df['Alíquota'] = nome_df['Alíquota'].fillna(nome_df['Alíquota'].mean())

    Trocar nome de somente uma coluna
    >>> vendas1.rename(columns={'Cliente_MalhariaIpanema_2020_semestre3': 'Clientes'}, inplace=True)

    Converter em float trocando ',' por '.'
    >>> nome_df['Preço] = nome_df['Preço'].apply(lambda x: str(x).replace(',','.'))
    >>> nome_df['Preço'].astype('float64')
    >>> nome_df['Preço] = nome_df['Preço'].str.replace(',','.').astype(int))

    Manter um número específico de casas decimais no resultado
    >>> nome_df['Alíquota'].sum().round(2)

    Preencher espaços vazios deixados por tabelas dinâmicas
    >>> nome_df = nome_df.ffill()

    Exclusão de várias linhas
    >>> lista = [2, 4, 5, 9, 13]
    >>> for var in lista:
    >>> nome_df = nome_df.drop({var}, axis=0)

    Verificar a quantidade de repetições de cada item em uma coluna
    >>> display(nome_df['Cliente'].value_counts())

    Ordena o value_counts do maior para o menor
    >>> nome_df['Cliente'].value_counts(ascending= True)

    Agrupar value_counst por ano
    >>> nome_df['Data'].dt.year.value_counts()

    Contar como porcentagem
    >>> nome_df['Cliente'].value_counts(normalize=True)

    GroupBy
        Agrupamento: retorna as colunas Cliente e Vendas, agrupando os resultados por Cliente e trazendo a soma das vendas
        Pode se trazer também o valor máximo > .max(),o valor mínimo > .min(), a média > .mean(), a mediana > .median(), o desvio padrão > .std()

        >>> df.groupby(by='agrupador').mean()
        >>> df.groupby('agrupador').mean()

        Agrupamento em camadas, o que gera multi-index
        >>> df.groupby(by=['tipo, 'quartos']).max()

        Definindo uma coluna no final do groupby, o pandas vai agrupar as informações somente por ela
        >>> df.groupby(by=['tipo, 'quartos']).max().preco
        >>> df.groupby(by=['tipo, 'quartos']).mean().preco.sort_values(ascending=False)

        >>> nome_df[['Cliente', 'Vendas']].groupby('Cliente').sum()

    Append > une o dataframe vendas1 ao nome_df. Caso hajam colunas diferentes no vendas1 elas serão acrescentadas ao novo dataframe
    >>> nome_df = nome_df.append(vendas1)

    Merge > atribui a nome_df as colunas da vendas1, baseando nos nomes correspondentes das colunas
    >>> nome_df = nome_df.merge(vendas1)

    Retorna os valores como texto
    >>> nome_df.text

    O método .T transpõe as colunas como linhas_
    Trocar as linhas de posição com as colunas
    >>> df.transpose()

    Formatação como %
    : > indica que o campo será formatado, . > indica que o campo tem divisor de casas decimais, 2 > indica a quantidade de casas decimais desejada, % > indica que o formato é em percentual
    >>> nome_df['Churn'].value_counts(normalize=True).map("{:.2%}".format)

    Converter para data
    >>> nome_df['Data'] = pd.to_datatime.nome_df['Data']

    Converter para tipo numérico, colocando 0 nos que não forem possíveis de converter
    >>> nome_df['Preço'] = pd.to_numeric(nome_df['Preço'], erros="coerce")

    Join (Combinação de Tabelas)

        Importe cada tabela como um dataframe diferente
        Deve-se ter um dataframe de referência que contenha os id's utilizados nos outros
        Para realizar a combinação deve-se informar o dataframe de referência seguido do join. Em seguida informe o outro dataframe, utilizando o método set_index para indicar qual coluna será usada como id. Caso não seja informado o pandas utilizará o id padrão do sistema. O parâmetro on recebe a coluna do dataframe de referência que será usado para cruzar as informações com o outro.
        >>> clientes_df.join(vendas_df.set_index('id'), on='id_cliente')

    Para as Séries pode-se utilizar o comando de gráficos diretamente.
    >>> clientes_venda.plot(kind=bar)

    Criação de função
        Para aplicar em uma coluna do dataframe utilize o método apply e coloque o nome da função entre parênteses sem o parênteses dela
        >>> def nome_função(x)
        >>>    if x < 3.5:
        >>> return 'perto'
        >>>    else:
        >>> return 'longe'
        >>> df.distancia.apply(nome_funcao)

    Retorne o dataframe df quando os valores da coluna distancia estiverem entre 1 e 3
    >>> df[df.distancia.between(1,3).head(3)

    Sort_Values(): serve para o ordenamento de dataframes. No parâmetro by deve ser informada a coluna na qual o ordenamento se baseará. E no ascending a forma do ordenamento. Sendo True será do menor para o maior, False o inverso.
    >>> df.sort_values(by='preco', ascending=False)

    Pivoteamento
        Pode ser usado para situações para as quais os valores são únicos por linha, como os registros das notas de um aluno
        Permite visualizar os dados consolidados por coluna presente no dataframe
        Podendo ser criados dataframes para cada value do dataframe
        >>> df.pivot(index='nome', columns='disciplinas', values='nota_final')

    Quando se tem uma string pode-se acessar os caracteres dela
        >>> x = 'Ronaldo'
        >>> x[0]  > 'R'
        >>> x[-1] > 'o'

        Retorne o df1 quando as iniciais dos campos da coluna Name forem 'M'
        >>> df1[df1.Name.str[0] == 'M']

        Retorne o df1 quando os campos da coluna Name tiverem 3 caracteres
        >>> df1[df1.Name.str.len() == 3]

    Agrupe os dados de df1 pelas inicias dos campos da coluna Name, retornando somente a coluna Idade, fazendo a média das idades e plotando um gráfico de barras
    >>> df1.groupby(df1.Name.str[0]).Idade.mean().plot(kin='bar)

    Exportação de Dados
        Informe o dataframe, escolha o método to_ conforme o tipo de dados da exportação, e defina entre parênteses o nome do novo arquivo
        >>> df1.to_csv('export-dados.csv')

    Retorna True para as linhas duplicadas
    >>> df.duplicated()

    Remove as linhas duplicadas
    >>> df.drop.duplicates()

    >>> df.replace('?', np.nan)
    >>> df.replace('?', 0)
    >>>df.replace('?', 'nulo')
    substitui ? por outros valores

    Filtro em colunas
    >>> df[df['country' == 'Brazil']]
    >>> df[df.country == 'Brazil']

    Retornar o tipo de uma coluna
    >>> type(df.country)

    Retorna o nome do mês do campo
    >>> vendas_df['mes'] = vendas_df['data'].dt.month_name()